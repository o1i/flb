{"version":3,"sources":["components/Kachel.module.css","components/Kachel.js","components/AgeSlider.js","components/Average.js","components/Total.js","components/Threshold.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Kachel","id","children","className","styles","kachel","AgeSlider","ageMin","ageMax","setMin","setMax","type","onChange","event","parseInt","currentTarget","value","Average","Total","total","dataset","filter","ob","age","reduce","wert","obj","formattednumber","Intl","NumberFormat","maximumFractionDigits","format","Threshold","valueMin","setValueMin","style","width","App","useState","minAge","setMinAge","maxAge","setMaxAge","threshold","setThreshold","getData","useEffect","fetch","then","r","text","Papa","parse","complete","results","data","header","dynamicTyping","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e07eed8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"kachel\":\"Kachel_kachel__Tj9ps\"};","import React from \"react\";\nimport styles from \"./Kachel.module.css\";\n\nexport const Kachel = ({id, children}) =>  (\n    <div id={id} className={styles.kachel}>{children}</div>\n)\n","import React from \"react\";\nimport { Kachel } from \"./Kachel\";\n\nexport const AgeSlider = ({ id, ageMin, ageMax, setMin, setMax }) => (\n  <Kachel id={id}>\n    <span id=\"minAge\">\n      <input\n        type=\"number\"\n        onChange={event => {\n            setMin(parseInt(event.currentTarget.value))\n        }}\n        value={ageMin}\n      />\n    </span>\n    Min Age\n    <span id=\"maxAge\">\n      <input\n        type=\"number\"\n        onChange={event => setMax(parseInt(event.currentTarget.value))}\n        value={ageMax}\n      />\n    </span>\n    Max Age\n  </Kachel>\n);\n","import React from \"react\";\nimport {Kachel} from \"./Kachel\";\n\nexport const Average = ({id, ageMin, ageMax}) => (\n    <Kachel id={id}>\n        Average: \n        <span id=\"average\">{(ageMin + ageMax) / 2}</span>\n    </Kachel>\n)","import React from \"react\";\nimport { Kachel } from \"./Kachel\";\n\nexport const Total = ({ id, ageMin, ageMax, dataset }) => {\n  const total = dataset\n    .filter(ob => ob.age >= ageMin && ob.age <= ageMax)\n    .reduce((wert, obj) => wert + obj.value, 0);\n  const formattednumber = new Intl.NumberFormat('de-CH', { maximumFractionDigits: 3 }).format(total)\n  return (\n    <Kachel id={id}>\n      Total:\n      <span id=\"average\">{formattednumber}</span>\n    </Kachel>\n  );\n};\n","import React from \"react\";\nimport {Kachel} from \"./Kachel\";\n\nexport const Threshold = ({id, valueMin, setValueMin}) => (\n    <Kachel id={id}>\n        <span id=\"valueMin\"><input type=\"number\" style={{width: \"50px\"}} value={valueMin} onChange={setValueMin}/></span>\n        Value\n    </Kachel>\n)\n","import React, { useState, useEffect } from \"react\";\nimport { AgeSlider } from \"./components/AgeSlider\";\nimport { Average } from \"./components/Average\";\nimport { Total } from \"./components/Total\";\nimport { Kachel } from \"./components/Kachel\";\nimport { Threshold } from \"./components/Threshold\";\nimport Papa from \"papaparse\";\nimport \"./App.css\";\n\nfunction App() {\n  const [minAge, setMinAge] = useState(30);\n  const [maxAge, setMaxAge] = useState(45);\n  const [threshold, setThreshold] = useState(100);\n  const [dataset, getData] = useState([]);\n\n  useEffect(function() {\n    fetch(\"./dummy_data.csv\")\n      .then(r => r.text())\n      .then(text =>\n        Papa.parse(text, {\n          complete: function(results) {\n            getData(results.data);\n          },\n          header: true,\n          dynamicTyping: true\n        }\n        )\n\n      );\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div id=\"header\">\n        <h1>Some header</h1>\n      </div>\n      <AgeSlider\n        id=\"ageslider\"\n        ageMin={minAge}\n        ageMax={maxAge}\n        setMin={setMinAge}\n        setMax={setMaxAge}\n      />\n      <Threshold\n        id=\"threshold\"\n        valueMin={threshold}\n        setValueMin={setThreshold}\n      />\n      <Average id=\"average\" ageMin={minAge} ageMax={maxAge} />\n      <Total id=\"total\" ageMin={minAge} ageMax={maxAge} dataset={dataset} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}