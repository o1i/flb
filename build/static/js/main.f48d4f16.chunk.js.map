{"version":3,"sources":["utils/timeconversion.js","utils/constants.js","components/lernbuero/lernbuero.tsx","components/lbBlock/lbBlock.tsx","App.js","serviceWorker.js","index.js"],"names":["prettyTime","timestamp","ts","Date","Intl","DateTimeFormat","hour","minute","format","url","LernBuero","id","name","start","end","kw","setLbDict","Accordion","Collapse","eventKey","toString","CardGroup","Card","body","Button","onClick","e","fetch","method","headers","JSON","stringify","then","r","ok","json","j","variant","LbBlock","lbArray","newName","setNewName","newDate","setNewDate","newStart","setNewStart","newEnd","setNewEnd","Toggle","as","Header","map","x","key","type","placeholder","value","onChange","target","App","useState","lbDict","useEffect","defaultActiveKey","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f48d4f16.chunk.js","sourcesContent":["export const prettyTime = (timestamp) => {\n    const ts = new Date(timestamp * 1000);\n    const formatter = new Intl.DateTimeFormat(\"de-CH\", {hour:'numeric', minute:'numeric'}) \n    return(formatter.format(ts))\n}","export const url = process.env.NODE_ENV === \"production\" ? \"http://althir.pythonanywhere.com/api/v1/lb\" : \"http://0.0.0.0:5000/api/v1/lb\";","import React from \"react\";\nimport {prettyTime} from \"../../utils/timeconversion\"\nimport Card from 'react-bootstrap/Card'\nimport CardGroup from 'react-bootstrap/CardGroup'\nimport Accordion from 'react-bootstrap/Accordion'\nimport { LbType } from \"../../utils/types\"\nimport { url } from '../../utils/constants'\nimport Button from 'react-bootstrap/Button'\n\nexport const LernBuero = ({id, name, start, end, kw, setLbDict}: LbType) => {\n  \n  const deleteLernbuero = <HTMLInputElement, MouseEvent>(e:MouseEvent) => {\n    fetch(url, {method: \"DELETE\", headers: {'Content-Type': 'application/json'}, body: JSON.stringify({\n      \"id\": id,\n    })}) \n    .then(r => r.ok && r.json())\n    .then(j => setLbDict(j));\n  }\n  \n  return (\n  <Accordion.Collapse eventKey={kw.toString()}>\n    <CardGroup id={id.toString()}>\n      <Card body>{name}</Card>\n      <Card body>{prettyTime(start)} - {prettyTime(end)}</Card>\n      <Card body><Button onClick={deleteLernbuero} variant=\"primary\">&#10006;</Button></Card>\n    </CardGroup>\n  </Accordion.Collapse>\n)};\n","import React from \"react\";\nimport { LernBuero } from \"../lernbuero/lernbuero\"\nimport Card from 'react-bootstrap/Card'\nimport Accordion from 'react-bootstrap/Accordion'\nimport { LbType } from \"../../utils/types\"\nimport CardGroup from 'react-bootstrap/CardGroup'\nimport { url } from '../../utils/constants'\n\n\ninterface Props {\n  kw: number, \n  lbArray:LbType[], \n  newName:string, \n  setNewName:Function, \n  newDate: string, \n  setNewDate: Function, \n  newStart:string, \n  setNewStart:Function, \n  newEnd:string, \n  setNewEnd:Function,\n  createLernbuero:Function,\n  setLbDict:Function\n}\n\nexport const LbBlock = ({\n  kw, \n  lbArray, \n  newName, \n  setNewName, \n  newDate, \n  setNewDate, \n  newStart, \n  setNewStart, \n  newEnd, \n  setNewEnd,\n  setLbDict}: Props) => {\n    \n  const createLernbuero = <HTMLInputElement, MouseEvent>(e:MouseEvent) => {\n    fetch(url, {method: \"POST\", headers: {'Content-Type': 'application/json'}, body: JSON.stringify({\n      \"name\": newName,\n      \"date\": newDate,\n      \"start\": newStart,\n      \"end\": newEnd\n    })}) \n    .then(r => r.ok && r.json())\n    .then(j => setLbDict(j));\n    setNewName(\"\");\n    setNewDate(\"\");\n    setNewStart(\"\");\n    setNewEnd(\"\");\n  }\n    \n    return (\n  <Card>\n      <Accordion.Toggle as={Card.Header} eventKey={kw.toString()}>\n        KW {kw}\n      </Accordion.Toggle>\n    {lbArray.map(x => <LernBuero key={x.id} {...x} setLbDict={setLbDict}/>)}\n    <Accordion.Collapse eventKey={kw.toString()}>\n    <CardGroup id=\"new\">\n      <Card body> \n        <input type=\"text\" placeholder=\"Lernbuero-Name\" value={newName} onChange={e => setNewName(e.target.value)}/>\n      </Card>\n      <Card body> \n        <input type=\"date\" value={newDate} onChange={e => setNewDate(e.target.value)}/>\n      </Card>\n      <Card body> \n        <input type=\"time\" value={newStart} onChange={e => setNewStart(e.target.value)}/>\n      </Card>\n      <Card body> \n        <input type=\"time\" value={newEnd} onChange={e => setNewEnd(e.target.value)}/>\n      </Card>\n      <Card>\n        <input type=\"submit\" value=\"HinzufÃ¼gen\" onClick={createLernbuero}></input>\n      </Card>\n    </CardGroup>\n  </Accordion.Collapse>\n  </Card>\n)};\n","import React, { useState, useEffect } from \"react\";\nimport { LbBlock } from \"./components/lbBlock/lbBlock\";\nimport \"./App.css\";\nimport { url } from \"./utils/constants\";\nimport Accordion from 'react-bootstrap/Accordion'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n\nconst [lbDict, setLbDict] = useState([]);\nconst [newName, setNewName] = useState([]);\nconst [newDate, setNewDate] = useState([]);\nconst [newStart, setNewStart] = useState([]);\nconst [newEnd, setNewEnd] = useState([]);\n\nuseEffect(function() {\n  fetch(url, {method: 'get', headers: {'Content-Type': 'application/json'}})\n    .then(r => r.ok && r.json())\n    .then(j => setLbDict(j));\n}, []);\n\n\n  return(\n    <div>\n    <Accordion defaultActiveKey={Object.keys(lbDict)[0]}>\n      {Object.keys(lbDict).map(x => <LbBlock \n        key={x} \n        kw={x} \n        lbArray={lbDict[x]} \n        newName={newName} \n        setNewName={setNewName}\n        newDate={newDate} \n        setNewDate={setNewDate}\n        newStart={newStart} \n        setNewStart={setNewStart}\n        newEnd={newEnd} \n        setNewEnd={setNewEnd}\n        setLbDict={setLbDict}/>)}\n    </Accordion>\n    </div>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}